#!/bin/bash

. jenv
mkdir -p ~/.jarminal
touch ~/.jarminal/term.pid

if [ $RESULT -eq 1 ]
then
    echo "Exiting..."
    exit 1
fi

get_next_java_file() {

    cd ~/.jarminal
    COUNT=0

    while [ -f "JarminalBlock$COUNT.java" ]
    do
        COUNT=$[ $COUNT + 1 ]
    done

    JAVA_FILE="JarminalBlock$COUNT.java"
    CLASS_FILE="JarminalBlock$COUNT.class"
    CLASS_NAME="JarminalBlock$COUNT"

    touch "$JAVA_FILE"
}

start_interactive_terminal() {
    cd ~/.jarminal

    echo -n "jarminal>> "

    jarminal_read
    DATA=`cat .data_in`

    while [ "$DATA" != "exit()" ]
    do
        case $DATA in
            "exit()" | "exit" | "quit()" | "quit" | "exit;" | "exit();" | "quit;" | "quit();")        
                rm *
                exit
                ;;                            
        esac
        parse_data "$DATA"

        echo -n "jarminal>> "
        jarminal_read
        DATA=`cat .data_in`
    done
    echo "jarminal> "
}

parse_data() {
    cd ~/.jarminal
        
    HAS_BRACE=`expr "$1" : ".*{"`
    if [ $HAS_BRACE -gt 0 ]
    then
        IS_CLASS_DEF=`is_class_def "$1"`
        if [ $IS_CLASS_DEF -eq 0 ]
        then
            get_block_of_code "$1"
            compile_java_file
            execute_java_file "$CLASS_FILE" "$CLASS_NAME"
        elif [ $IS_CLASS_DEF -gt 0 ]
        then
            create_class "$1"
        fi
    fi

    HAS_IMPORT=`expr "$1" : "import"`
    if [ $HAS_IMPORT -gt 0 ]
    then
        append_to_import_file "$1"
    fi

    args=()
    COUNTER=0
    for arg in $1 
    do
        args[$COUNTER]=$arg
        COUNTER=$[ $COUNTER + 1 ]
    done
    
    IS_HELP=0
    if [ $COUNTER -eq 2 ] && [ ${args[$COUNTER - 2]} == "help" ]
    then
        jarminal_help "${args[$COUNTER - 1]}"
        IS_HELP=1
    elif [ $COUNTER -eq 1 ]
    then
        if [ ${args[$COUNTER - 1]} == "help" ]
        then
            echo -e "\nPlease specify a fully qualified class name\n"        
            IS_HELP=1
        fi
    elif [ $COUNTER -eq 0 ]
    then
        COUNTER=1
    fi

    case ${args[$COUNTER - 1]} in
        cls)
            clear
            ;;
        clear)
            clear
            ;;
        *)    
            if [ $HAS_IMPORT -eq 0 ] && [ $HAS_BRACE -eq 0 ] && [ $IS_HELP -eq 0 ]
            then
                get_next_java_file
                _DATA="$1"
                echo "$_DATA" | sed "s/\"/\\\"/g" > sed_out
                create_java_file "`cat sed_out`" "$JAVA_FILE" "$CLASS_FILE" "$CLASS_NAME"
                compile_java_file 
                execute_java_file "$CLASS_FILE" "$CLASS_NAME"
            fi
            ;; 
    esac
}

create_class() {
    cd ~/.jarminal

    CLASS_NAME="`get_class_name "$1"`"
    if [ -f "$CLASS_NAME.java" ]
    then
        rm "$CLASS_NAME.java"
    fi

    touch "$CLASS_NAME.java"
    
    JAVA_FILE="$CLASS_NAME.java"
    CLASS_FILE="$CLASS_NAME.class"

    if [ -f $IMPORT_FILE ]
    then
        cat $IMPORT_FILE >> $JAVA_FILE
    fi
    
    read_append "$1" $JAVA_FILE

    compile_java_file 
}

get_block_of_code() {
    cd ~/.jarminal

    get_next_java_file

    create_partial_java_file "$JAVA_FILE" "$CLASS_FILE" "$CLASS_NAME"

    read_append "$1" $JAVA_FILE

    complete_java_file
}

compile_java_file() {
    cd ~/.jarminal
    `javac $CMD_OPTIONS $JAVA_FILE`
}

complete_java_file() {
    cd ~/.jarminal
    echo " System.exit(0); } }" >> $JAVA_FILE
}

case "$1" in
    -e | --execute)
        create_java_file "$2" "$JAVA_FILE" "$CLASS_FILE" "$CLASS_NAME"
        compile_java_file 
        execute_java_file "$CLASS_FILE" "$CLASS_NAME"
        cd ~/.jarminal
        rm *
        ;;
    -i | --interactive)
        start_interactive_terminal
        cd ~/.jarminal
        rm *
        ;;        
    -h | --help)
        if [ "$2" == "" ]
        then
                echo -e "Jarminal is a Java Interactive Shell."
                echo -e "It provides you with basic functionalities to quickly execute java commands in the terminal"
                echo -e "Synopsis: jarminal [options] [command]"
                echo -e "Options can be any of"
                echo -e "-e, --execute: Executes a java command specified by [command]. The user must manually escape strings"
                echo -e "-i, --interactive: Starts an interactive shell."
                echo -e "\tIn this mode, user dont have to escape strings."
                echo -e "\timport statements are remembered during every interactive session."
                echo -e "\tclass declarations are also remembered during every interactive session"
                echo -e "\tuser can also put a block of code in {......}"
                echo -e "\thelp for java classes are available. e.g help java.awt.CheckBox"
                echo -e "-h, --help: displays this message"
                echo -e "\tIf a fully qualified class name is provided when calling help"
                echo -e "\t(e.g jarminal -h java.util.Vector), jarminal will display the java doc file"
                echo -e "\tfor this to work properly however, you need to configure the java_doc_path in the configuration file\n\n"
            else
                jarminal_help "$2"
            fi
        ;;                     
    *)
        echo -e -n "Type jarminal --help for help info\n\n"
esac        


exit 0;

